library(readxl)
Dataset_1 <- read_excel("C:/Users/docto/Downloads/Dataset 1.xlsx")
View(Dataset_1)
data = Dataset_1
cols = c('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'B15', 'B16', 'B17', 'B18', 'B19', 'B20', 'B21')
data$depression = rowSums(data[,cols])
data = Dataset_1
cols = c('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'B15', 'B16', 'B17', 'B18', 'B19', 'B20', 'B21')
data$depression = rowSums(data[,cols])
data$depression
data = Dataset_1
cols = c('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'B15', 'B16', 'B17', 'B18', 'B19', 'B20', 'B21')
data$depression = rowSums(data[,cols])
data$depression
t.test(data$`Marriage Style`, data$depression)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
model = lm(salary~tuition)
print(model)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition))
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
print(model)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
model
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)$r-squared
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)$r.squared
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
model2 = lm(c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114), c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506))
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
model2 = lm(c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)~c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506))
summary(model2)
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h = horizontal_line)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h = 0)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h = 0, col = 'red')
reverse_model = lm(tuition~salary)
summary*(reverse_model)
reverse_model = lm(tuition~salary)
summary(reverse_model)
res = residuals(reverse_model)
plot(fitted(reverse_model), res, ylab = 'residuals')
abline(h = 0, col = 'red')
libary(glue)
library(glue)
vandy_salary = -0.06303 * 45000 + 12460
glue('Predicted Vanderbilt Mid-Career Salary: {vandy_salary}')
vandy_salary = -0.06303 * 45000 + 124600
glue('Predicted Vanderbilt Mid-Career Salary: {vandy_salary}')
vandy_salary = -0.06303 * 45000 + 124600
glue('Predicted Vanderbilt Mid-Career Salary: ${vandy_salary}')
vandy_salary = -0.06303 * 45000 + 124600
glue('Predicted Vanderbilt Mid-Career Salary: ${vandy_salary}')
reverse_model = lm(tuition~salary)
summary(reverse_model)
res = residuals(reverse_model)
plot(fitted(reverse_model), res, ylab = 'residuals')
abline(h = 0, col = 'red')
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h = 0, col = 'red')
colleges = c('Princeton', 'Harvey Mudd', 'CalTech', 'US Naval Academy', 'West Point', 'MIT', 'Lehigh University', 'NYU-Poly', 'Babson College', 'Stanford')
salary = c(137, 135, 127, 122, 120, 118, 118, 117, 117, 114)
salary = salary * 1000
tuition = c(28540, 40133, 39900, 0, 0, 42050, 43220, 39565, 40400, 54506)
# plot scatterplot
plot(tuition, salary, main = 'Salary vs Tuition', xlab='Tuition (Dollars)', ylab='Salary (Dollars)')
abline(lm(salary~tuition), col = 'red')
model = lm(salary~tuition)
summary(model)
res = residuals(model)
plot(fitted(model), res, ylab = 'residuals')
abline(h = 0, col = 'red')
library(glue)
install.packages("RMySQL")
library(RMySQL)
install.packages(installr)
install.packages('installr')
library(installr)
updateR()
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
password = db_password)
library(data.table)
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
db_user <- "admin"
db_password <- "QBs9amLgUF6gXtPr9w11"
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
password = db_password)
library(DBI)
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(lubridate)
library(dplyr)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(lubridate)
library(dplyr)
library(data.table)
library(DBI)
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
db_user <- "admin"
db_password <- "QBs9amLgUF6gXtPr9w11"
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
password = db_password)
# SQL query templates
get_id <- "SELECT ID FROM himiko_%s.accounts WHERE Name LIKE '%%%s%%';"
account_id_filter <- "SELECT * FROM himiko_%s.trades WHERE AccountID = '%s' AND Volume > 0 AND Date > '%s';"
ticker_filter <- "SELECT * FROM himiko_%s.trades WHERE Ticker = '%s' AND Volume > 0 AND Date > '%s' AND Date < '%s';"
book_filter <- "SELECT * FROM himiko.marketData WHERE Ticker = '%s' AND Timestamp > %s AND Timestamp < %s;"
orders_filter <- "SELECT * FROM himiko_test.orders WHERE Ticker = '%s' AND Timestamp > %s AND Timestamp < %s;"
# Database dictionaries
db_dict <- list(
KUCN = c('ZBCN', 'AIOZ', 'PBUX'),
MXC = c('NOS')
)
ticker_to_pair <- list(
ZBCN_KUCN = c('ZBCN/USDT/KUCN', 'ZBCN/USDT/KUCN'),
AIOZ_KUCN = c('AIOZ/USDT/KUCN', 'AIOZ/USDT/KUCN'),
PBUX_KUCN = c('PBUX/USDT/KUCN', 'PBUX/USDT/KUCN'),
NOS_MXC = c('NOS/USDT/MXC', 'NOS/USDT/MXC')
)
ticker_to_db <- sapply(names(db_dict), function(suffix) {
sapply(db_dict[[suffix]], function(prefix) {
setNames(list(c('test', 'test')), paste(prefix, suffix, sep = "_"))
})
}, simplify = FALSE)
ticker_to_db <- unlist(ticker_to_db, recursive = FALSE)
# Main script
df_dict <- list()
start_date <- "2024-09-03 15:25:00"
end_date <- "2024-09-05 00:00:00"
start_epoch <- date_to_milliseconds(start_date)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(lubridate)
library(dplyr)
library(data.table)
library(DBI)
# Helper function to convert date to milliseconds
date_to_milliseconds <- function(date_str) {
as.numeric(as.POSIXct(date_str, tz = "UTC")) * 1000
}
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
db_user <- "admin"
db_password <- "QBs9amLgUF6gXtPr9w11"
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
password = db_password)
# SQL query templates
get_id <- "SELECT ID FROM himiko_%s.accounts WHERE Name LIKE '%%%s%%';"
account_id_filter <- "SELECT * FROM himiko_%s.trades WHERE AccountID = '%s' AND Volume > 0 AND Date > '%s';"
ticker_filter <- "SELECT * FROM himiko_%s.trades WHERE Ticker = '%s' AND Volume > 0 AND Date > '%s' AND Date < '%s';"
book_filter <- "SELECT * FROM himiko.marketData WHERE Ticker = '%s' AND Timestamp > %s AND Timestamp < %s;"
orders_filter <- "SELECT * FROM himiko_test.orders WHERE Ticker = '%s' AND Timestamp > %s AND Timestamp < %s;"
# Database dictionaries
db_dict <- list(
KUCN = c('ZBCN', 'AIOZ', 'PBUX'),
MXC = c('NOS')
)
ticker_to_pair <- list(
ZBCN_KUCN = c('ZBCN/USDT/KUCN', 'ZBCN/USDT/KUCN'),
AIOZ_KUCN = c('AIOZ/USDT/KUCN', 'AIOZ/USDT/KUCN'),
PBUX_KUCN = c('PBUX/USDT/KUCN', 'PBUX/USDT/KUCN'),
NOS_MXC = c('NOS/USDT/MXC', 'NOS/USDT/MXC')
)
ticker_to_db <- sapply(names(db_dict), function(suffix) {
sapply(db_dict[[suffix]], function(prefix) {
setNames(list(c('test', 'test')), paste(prefix, suffix, sep = "_"))
})
}, simplify = FALSE)
ticker_to_db <- unlist(ticker_to_db, recursive = FALSE)
# Main script
df_dict <- list()
start_date <- "2024-09-03 15:25:00"
end_date <- "2024-09-05 00:00:00"
start_epoch <- date_to_milliseconds(start_date)
end_epoch <- date_to_milliseconds(end_date)
cat(sprintf("Start epoch: %s, End epoch: %s\n", start_epoch, end_epoch))
for (i in names(ticker_to_db)) {
con <- connect_to_db()
cat(sprintf("Fetching data for %s\n", i))
start_time <- Sys.time()
# Fetch trades data
query <- sprintf(ticker_filter, ticker_to_db[[i]][1], ticker_to_pair[[i]][1], start_date, end_date)
trades <- dbGetQuery(con, query)
cat(sprintf("SQL query took %.2f seconds\n", as.numeric(difftime(Sys.time(), start_time, units = "secs"))))
if (nrow(trades) == 0) {
cat(sprintf("No trade data found for %s\n", i))
} else {
trades$Date <- as.POSIXct(trades$Date, tz = "UTC")
trades$epoch <- as.numeric(trades$Date)
trades$minute_of_day <- hour(trades$Date) * 60 + minute(trades$Date)
}
print(head(trades))
# Fetch quote orderbook data
query <- sprintf(book_filter, ticker_to_pair[[i]][1], start_epoch, end_epoch)
quote_orderbook <- dbGetQuery(con, query)
if (nrow(quote_orderbook) == 0) {
cat(sprintf("No Quote Orderbook Data for %s\n", ticker_to_pair[[i]][1]))
}
quote_orderbook$midprice <- (quote_orderbook$BidPrice + quote_orderbook$AskPrice) / 2
quote_orderbook$Date <- as.POSIXct(quote_orderbook$Timestamp / 1000, origin = "1970-01-01", tz = "UTC")
print(head(quote_orderbook))
# Fetch reference orderbook data
query <- sprintf(book_filter, ticker_to_pair[[i]][2], start_epoch, end_epoch)
ref_orderbook <- dbGetQuery(con, query)
if (nrow(ref_orderbook) == 0) {
cat(sprintf("No Reference Orderbook Data for %s\n", ticker_to_pair[[i]][2]))
}
ref_orderbook$midprice <- (ref_orderbook$BidPrice + ref_orderbook$AskPrice) / 2
ref_orderbook$Date <- as.POSIXct(ref_orderbook$Timestamp / 1000, origin = "1970-01-01", tz = "UTC")
print(head(ref_orderbook))
# Fetch orders data
query <- sprintf(orders_filter, ticker_to_pair[[i]][1], start_epoch, end_epoch)
orders <- dbGetQuery(con, query)
orders$Date <- as.POSIXct(orders$Timestamp / 1000, origin = "1970-01-01", tz = "UTC")
print(head(orders))
cat(sprintf("Collecting data: %.2f seconds\n", as.numeric(difftime(Sys.time(), start_time, units = "secs"))))
df_dict[[i]] <- list(trades = trades, quote_orderbook = quote_orderbook, ref_orderbook = ref_orderbook, orders = orders)
dbDisconnect(con)
}
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
dbname = db
password = db_password)
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
dbname = 'db'
password = db_password)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(lubridate)
library(dplyr)
library(data.table)
library(DBI)
# Helper function to convert date to milliseconds
date_to_milliseconds <- function(date_str) {
as.numeric(as.POSIXct(date_str, tz = "UTC")) * 1000
}
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
db_user <- "admin"
db_password <- "QBs9amLgUF6gXtPr9w11"
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
dbname = 'db'
password = db_password)
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
dbname = "db",
password = db_password)
knitr::opts_chunk$set(echo = TRUE)
library(RMySQL)
library(lubridate)
library(dplyr)
library(data.table)
library(DBI)
# Helper function to convert date to milliseconds
date_to_milliseconds <- function(date_str) {
as.numeric(as.POSIXct(date_str, tz = "UTC")) * 1000
}
# Replace these with your actual database details
db_host <- "analysis.c2hjono7u77j.eu-central-1.rds.amazonaws.com"
db_user <- "admin"
db_password <- "QBs9amLgUF6gXtPr9w11"
# Create the connection
con <- dbConnect(MySQL(),
host = db_host,
user = db_user,
dbname = "db",
password = db_password)
display(trade_data)
trade_data = read.csv('historical_trade_data.csv')
trade_data = read.csv('historical_trade_data.csv')
trade_data = read.csv('historical_trade_data.csv')
trade_data = read.csv('historical_trade_data.csv')
trade_data = read.csv('historical_trade_data.csv')
dir
exit
setwd("~/vanderbilt/2024_fall/hist-1354/hist-1354-code")
trade_data = read.csv('historical_trade_data.csv')dir
trade_data = read.csv('historical_trade_data.csv')
display(trade_data)
trade_data = read.csv('historical_trade_data.csv')
trade_data
trade_data.head(5)
trade_data = read.csv('historical_trade_data.csv')
trade_data.head(5)
head(trade_data)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
trade_data = read.csv('historical_trade_data.csv')
head(trade_data)
large_exports = trade_data[trade_data$Exports > 200000]
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports$NetFlow = large_exports$Exports - large_exports$Imports
large_exports
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports$TradeBalance = large_exports$Exports - large_exports$Imports
large_exports
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports$TradeBalance = large_exports$Exports - large_exports$Imports
large_exports
ggplot(large_exports, aes(x = Year, y = TradeBalance)) +
geom_line() +
theme_minimal() +
labs(title = "Trade Balance Over Time",
x = "Year",
y = "Trade Balance")
library(ggplot2)
trade_data = read.csv('historical_trade_data.csv')
head(trade_data)
update.packages(ask = FALSE)
library(ggplot2)
trade_data = read.csv('historical_trade_data.csv')
head(trade_data)
large_exports = trade_data[trade_data$Exports > 200000,]
large_exports$TradeBalance = large_exports$Exports - large_exports$Imports
large_exports
ggplot(large_exports, aes(x = Year, y = TradeBalance)) +
geom_line() +
theme_minimal() +
labs(title = "Trade Balance Over Time",
x = "Year",
y = "Trade Balance")
ggplot2(large_exports, aes(x = Year, y = TradeBalance)) +
geom_line() +
theme_minimal() +
labs(title = "Trade Balance Over Time",
x = "Year",
y = "Trade Balance")
ggplot(large_exports, aes(x = Year, y = TradeBalance)) +
geom_line() +
theme_minimal() +
labs(title = "Trade Balance Over Time",
x = "Year",
y = "Trade Balance")
install.packages("rlang")
install.packages("rlang")
update.packages(ask = FALSE)
update.packages(ask = FALSE)
